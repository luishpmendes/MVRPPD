#include "../instance/Instance.hpp"
#include <cassert>
#include <cfloat>
#include <cmath>
#include <limits>

int main() {
    Instance instance;

    instance = Instance("instances/test.in");

    assert(instance.isValid());
    assert(instance.getNumRequests() == 8);
    assert(instance.getNumVehicles() == 2);
    assert(instance.getNumVertices() == 20);
    assert(instance.getSumProfit() == 27);

    assert(instance.getProfits().size() == 8);
    assert(instance.getProfit(0) == 7);
    assert(instance.getProfit(1) == 5);
    assert(instance.getProfit(2) == 2);
    assert(instance.getProfit(3) == 3);
    assert(instance.getProfit(4) == 3);
    assert(instance.getProfit(5) == 3);
    assert(instance.getProfit(6) == 2);
    assert(instance.getProfit(7) == 2);

    assert(instance.getTCreates().size() == 8);
    assert(instance.getTCreate(0) == 0);
    assert(instance.getTCreate(1) == 0);
    assert(instance.getTCreate(2) == 0);
    assert(instance.getTCreate(3) == 0);
    assert(instance.getTCreate(4) == 0);
    assert(instance.getTCreate(5) == 0);
    assert(instance.getTCreate(6) == 0);
    assert(instance.getTCreate(7) == 0);

    assert(instance.getDemandsR().size() == 8);
    assert(instance.getDemandR(0) == 7);
    assert(instance.getDemandR(1) == 5);
    assert(instance.getDemandR(2) == 2);
    assert(instance.getDemandR(3) == 3);
    assert(instance.getDemandR(4) == 3);
    assert(instance.getDemandR(5) == 3);
    assert(instance.getDemandR(6) == 2);
    assert(instance.getDemandR(7) == 2);

    assert(instance.getSourcesR().size() == 8);
    assert(instance.getSourceR(0) == 4);
    assert(instance.getSourceR(1) == 6);
    assert(instance.getSourceR(2) == 8);
    assert(instance.getSourceR(3) == 10);
    assert(instance.getSourceR(4) == 12);
    assert(instance.getSourceR(5) == 14);
    assert(instance.getSourceR(6) == 16);
    assert(instance.getSourceR(7) == 18);

    assert(instance.getTargetsR().size() == 8);
    assert(instance.getTargetR(0) == 5);
    assert(instance.getTargetR(1) == 7);
    assert(instance.getTargetR(2) == 9);
    assert(instance.getTargetR(3) == 11);
    assert(instance.getTargetR(4) == 13);
    assert(instance.getTargetR(5) == 15);
    assert(instance.getTargetR(6) == 17);
    assert(instance.getTargetR(7) == 19);

    assert(instance.getTStarts().size() == 2);
    assert(instance.getTStart(0) == 0);
    assert(instance.getTStart(1) == 0);

    assert(instance.getTLimits().size() == 2);
    assert(instance.getTLimit(0) == 37);
    assert(instance.getTLimit(1) == 31);

    assert(instance.getSpeeds().size() == 2);
    assert(instance.getSpeed(0) == 5);
    assert(instance.getSpeed(1) == 2);

    assert(instance.getCapacities().size() == 2);
    assert(instance.getCapacity(0) == 25);
    assert(instance.getCapacity(1) == 18);

    assert(instance.getSourcesK().size() == 2);
    assert(instance.getSourceK(0) == 0);
    assert(instance.getSourceK(1) == 2);

    assert(instance.getTargetsK().size() == 2);
    assert(instance.getTargetK(0) == 1);
    assert(instance.getTargetK(1) == 3);

    assert(instance.getX().size() == 20);
    assert(instance.getX(0) == 3);
    assert(instance.getX(1) == 5);
    assert(instance.getX(2) == 7);
    assert(instance.getX(3) == 6);
    assert(instance.getX(4) == 1);
    assert(instance.getX(5) == 3);
    assert(instance.getX(6) == 1);
    assert(instance.getX(7) == 6);
    assert(instance.getX(8) == 3);
    assert(instance.getX(9) == 2);
    assert(instance.getX(10) == 3);
    assert(instance.getX(11) == 6);
    assert(instance.getX(12) == 4);
    assert(instance.getX(13) == 4);
    assert(instance.getX(14) == 9);
    assert(instance.getX(15) == 7);
    assert(instance.getX(16) == 8);
    assert(instance.getX(17) == 7);
    assert(instance.getX(18) == 8);
    assert(instance.getX(19) == 9);

    assert(instance.getY().size() == 20);
    assert(instance.getY(0) == 5);
    assert(instance.getY(1) == 3);
    assert(instance.getY(2) == 6);
    assert(instance.getY(3) == 7);
    assert(instance.getY(4) == 7);
    assert(instance.getY(5) == 2);
    assert(instance.getY(6) == 1);
    assert(instance.getY(7) == 1);
    assert(instance.getY(8) == 8);
    assert(instance.getY(9) == 9);
    assert(instance.getY(10) == 4);
    assert(instance.getY(11) == 4);
    assert(instance.getY(12) == 6);
    assert(instance.getY(13) == 3);
    assert(instance.getY(14) == 9);
    assert(instance.getY(15) == 8);
    assert(instance.getY(16) == 6);
    assert(instance.getY(17) == 7);
    assert(instance.getY(18) == 3);
    assert(instance.getY(19) == 2);

    assert(instance.getTVisits().size() == 20);
    assert(instance.getTVisit(0) == 2);
    assert(instance.getTVisit(1) == 2);
    assert(instance.getTVisit(2) == 5);
    assert(instance.getTVisit(3) == 5);
    assert(instance.getTVisit(4) == 4);
    assert(instance.getTVisit(5) == 4);
    assert(instance.getTVisit(6) == 3);
    assert(instance.getTVisit(7) == 3);
    assert(instance.getTVisit(8) == 1);
    assert(instance.getTVisit(9) == 1);
    assert(instance.getTVisit(10) == 2);
    assert(instance.getTVisit(11) == 2);
    assert(instance.getTVisit(12) == 2);
    assert(instance.getTVisit(13) == 2);
    assert(instance.getTVisit(14) == 2);
    assert(instance.getTVisit(15) == 2);
    assert(instance.getTVisit(16) == 1);
    assert(instance.getTVisit(17) == 1);
    assert(instance.getTVisit(18) == 1);
    assert(instance.getTVisit(19) == 1);

    assert(instance.getRequestsV().size() == 20);
    assert(instance.getRequestV(0) >= 8);
    assert(instance.getRequestV(1) >= 8);
    assert(instance.getRequestV(2) >= 8);
    assert(instance.getRequestV(3) >= 8);
    assert(instance.getRequestV(4) == 0);
    assert(instance.getRequestV(5) == 0);
    assert(instance.getRequestV(6) == 1);
    assert(instance.getRequestV(7) == 1);
    assert(instance.getRequestV(8) == 2);
    assert(instance.getRequestV(9) == 2);
    assert(instance.getRequestV(10) == 3);
    assert(instance.getRequestV(11) == 3);
    assert(instance.getRequestV(12) == 4);
    assert(instance.getRequestV(13) == 4);
    assert(instance.getRequestV(14) == 5);
    assert(instance.getRequestV(15) == 5);
    assert(instance.getRequestV(16) == 6);
    assert(instance.getRequestV(17) == 6);
    assert(instance.getRequestV(18) == 7);
    assert(instance.getRequestV(19) == 7);

    assert(instance.getVehiclesV().size() == 20);
    assert(instance.getVehicleV(0) == 0);
    assert(instance.getVehicleV(1) == 0);
    assert(instance.getVehicleV(2) == 1);
    assert(instance.getVehicleV(3) == 1);
    assert(instance.getVehicleV(4) >= 2);
    assert(instance.getVehicleV(5) >= 2);
    assert(instance.getVehicleV(6) >= 2);
    assert(instance.getVehicleV(7) >= 2);
    assert(instance.getVehicleV(8) >= 2);
    assert(instance.getVehicleV(9) >= 2);
    assert(instance.getVehicleV(10) >= 2);
    assert(instance.getVehicleV(11) >= 2);
    assert(instance.getVehicleV(12) >= 2);
    assert(instance.getVehicleV(13) >= 2);
    assert(instance.getVehicleV(14) >= 2);
    assert(instance.getVehicleV(15) >= 2);
    assert(instance.getVehicleV(16) >= 2);
    assert(instance.getVehicleV(17) >= 2);
    assert(instance.getVehicleV(18) >= 2);
    assert(instance.getVehicleV(19) >= 2);

    assert(instance.isASource(0));
    assert(!instance.isASource(1));
    assert(instance.isASource(2));
    assert(!instance.isASource(3));
    assert(instance.isASource(4));
    assert(!instance.isASource(5));
    assert(instance.isASource(6));
    assert(!instance.isASource(7));
    assert(instance.isASource(8));
    assert(!instance.isASource(9));
    assert(instance.isASource(10));
    assert(!instance.isASource(11));
    assert(instance.isASource(12));
    assert(!instance.isASource(13));
    assert(instance.isASource(14));
    assert(!instance.isASource(15));
    assert(instance.isASource(16));
    assert(!instance.isASource(17));
    assert(instance.isASource(18));
    assert(!instance.isASource(19));

    assert(!instance.isATarget(0));
    assert(instance.isATarget(1));
    assert(!instance.isATarget(2));
    assert(instance.isATarget(3));
    assert(!instance.isATarget(4));
    assert(instance.isATarget(5));
    assert(!instance.isATarget(6));
    assert(instance.isATarget(7));
    assert(!instance.isATarget(8));
    assert(instance.isATarget(9));
    assert(!instance.isATarget(10));
    assert(instance.isATarget(11));
    assert(!instance.isATarget(12));
    assert(instance.isATarget(13));
    assert(!instance.isATarget(14));
    assert(instance.isATarget(15));
    assert(!instance.isATarget(16));
    assert(instance.isATarget(17));
    assert(!instance.isATarget(18));
    assert(instance.isATarget(19));

    assert(instance.getDemandsV().size() == 20);
    assert(fabs(instance.getDemandV(0) - 0.0) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getDemandV(1) - 0.0) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getDemandV(2) - 0.0) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getDemandV(3) - 0.0) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getDemandV(4) - 7.0) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getDemandV(5) + 7.0) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getDemandV(6) - 5.0) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getDemandV(7) + 5.0) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getDemandV(8) - 2.0) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getDemandV(9) + 2.0) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getDemandV(10) - 3.0) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getDemandV(11) + 3.0) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getDemandV(12) - 3.0) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getDemandV(13) + 3.0) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getDemandV(14) - 3.0) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getDemandV(15) + 3.0) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getDemandV(16) - 2.0) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getDemandV(17) + 2.0) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getDemandV(18) - 2.0) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getDemandV(19) + 2.0) < std::numeric_limits<float>::epsilon());

    assert(instance.getLengths().size() == 20);

    assert(instance.getLengths()[0].size() == 20);
    assert(fabs(instance.getLength(0, 0) - sqrt(0.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(0, 1) - sqrt(8.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(0, 2) - sqrt(17.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(0, 3) - sqrt(13.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(0, 4) - sqrt(8.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(0, 5) - sqrt(9.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(0, 6) - sqrt(20.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(0, 7) - sqrt(25.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(0, 8) - sqrt(9.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(0, 9) - sqrt(17.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(0, 10) - sqrt(1.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(0, 11) - sqrt(10.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(0, 12) - sqrt(2.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(0, 13) - sqrt(5.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(0, 14) - sqrt(52.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(0, 15) - sqrt(25.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(0, 16) - sqrt(26.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(0, 17) - sqrt(20.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(0, 18) - sqrt(29.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(0, 19) - sqrt(45.0)) < std::numeric_limits<float>::epsilon());

    assert(instance.getLengths()[1].size() == 20);
    assert(fabs(instance.getLength(1, 0) - sqrt(8.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(1, 1) - sqrt(0.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(1, 2) - sqrt(13.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(1, 3) - sqrt(17.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(1, 4) - sqrt(32.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(1, 5) - sqrt(5.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(1, 6) - sqrt(20.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(1, 7) - sqrt(5.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(1, 8) - sqrt(29.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(1, 9) - sqrt(45.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(1, 10) - sqrt(5.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(1, 11) - sqrt(2.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(1, 12) - sqrt(10.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(1, 13) - sqrt(1.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(1, 14) - sqrt(52.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(1, 15) - sqrt(29.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(1, 16) - sqrt(18.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(1, 17) - sqrt(20.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(1, 18) - sqrt(9.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(1, 19) - sqrt(17.0)) < std::numeric_limits<float>::epsilon());

    assert(instance.getLengths()[2].size() == 20);
    assert(fabs(instance.getLength(2, 0) - sqrt(17.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(2, 1) - sqrt(13.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(2, 2) - sqrt(0.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(2, 3) - sqrt(2.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(2, 4) - sqrt(37.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(2, 5) - sqrt(32.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(2, 6) - sqrt(61.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(2, 7) - sqrt(26.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(2, 8) - sqrt(20.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(2, 9) - sqrt(34.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(2, 10) - sqrt(20.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(2, 11) - sqrt(5.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(2, 12) - sqrt(9.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(2, 13) - sqrt(18.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(2, 14) - sqrt(13.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(2, 15) - sqrt(4.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(2, 16) - sqrt(1.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(2, 17) - sqrt(1.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(2, 18) - sqrt(10.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(2, 19) - sqrt(20.0)) < std::numeric_limits<float>::epsilon());

    assert(instance.getLengths()[3].size() == 20);
    assert(fabs(instance.getLength(3, 0) - sqrt(13.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(3, 1) - sqrt(17.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(3, 2) - sqrt(2.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(3, 3) - sqrt(0.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(3, 4) - sqrt(25.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(3, 5) - sqrt(34.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(3, 6) - sqrt(61.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(3, 7) - sqrt(36.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(3, 8) - sqrt(10.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(3, 9) - sqrt(20.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(3, 10) - sqrt(18.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(3, 11) - sqrt(9.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(3, 12) - sqrt(5.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(3, 13) - sqrt(20.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(3, 14) - sqrt(13.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(3, 15) - sqrt(2.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(3, 16) - sqrt(5.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(3, 17) - sqrt(1.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(3, 18) - sqrt(20.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(3, 19) - sqrt(34.0)) < std::numeric_limits<float>::epsilon());

    assert(instance.getLengths()[4].size() == 20);
    assert(fabs(instance.getLength(4, 0) - sqrt(8.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(4, 1) - sqrt(32.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(4, 2) - sqrt(37.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(4, 3) - sqrt(25.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(4, 4) - sqrt(0.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(4, 5) - sqrt(29.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(4, 6) - sqrt(36.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(4, 7) - sqrt(61.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(4, 8) - sqrt(5.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(4, 9) - sqrt(5.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(4, 10) - sqrt(13.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(4, 11) - sqrt(34.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(4, 12) - sqrt(10.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(4, 13) - sqrt(25.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(4, 14) - sqrt(68.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(4, 15) - sqrt(37.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(4, 16) - sqrt(50.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(4, 17) - sqrt(36.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(4, 18) - sqrt(65.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(4, 19) - sqrt(89.0)) < std::numeric_limits<float>::epsilon());

    assert(instance.getLengths()[5].size() == 20);
    assert(fabs(instance.getLength(5, 0) - sqrt(9.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(5, 1) - sqrt(5.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(5, 2) - sqrt(32.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(5, 3) - sqrt(34.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(5, 4) - sqrt(29.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(5, 5) - sqrt(0.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(5, 6) - sqrt(5.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(5, 7) - sqrt(10.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(5, 8) - sqrt(36.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(5, 9) - sqrt(50.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(5, 10) - sqrt(4.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(5, 11) - sqrt(13.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(5, 12) - sqrt(17.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(5, 13) - sqrt(2.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(5, 14) - sqrt(85.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(5, 15) - sqrt(52.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(5, 16) - sqrt(41.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(5, 17) - sqrt(41.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(5, 18) - sqrt(26.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(5, 19) - sqrt(36.0)) < std::numeric_limits<float>::epsilon());

    assert(instance.getLengths()[6].size() == 20);
    assert(fabs(instance.getLength(6, 0) - sqrt(20.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(6, 1) - sqrt(20.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(6, 2) - sqrt(61.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(6, 3) - sqrt(61.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(6, 4) - sqrt(36.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(6, 5) - sqrt(5.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(6, 6) - sqrt(0.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(6, 7) - sqrt(25.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(6, 8) - sqrt(53.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(6, 9) - sqrt(65.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(6, 10) - sqrt(13.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(6, 11) - sqrt(34.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(6, 12) - sqrt(34.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(6, 13) - sqrt(13.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(6, 14) - sqrt(128.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(6, 15) - sqrt(85.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(6, 16) - sqrt(74.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(6, 17) - sqrt(72.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(6, 18) - sqrt(53.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(6, 19) - sqrt(65.0)) < std::numeric_limits<float>::epsilon());

    assert(instance.getLengths()[7].size() == 20);
    assert(fabs(instance.getLength(7, 0) - sqrt(25.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(7, 1) - sqrt(5.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(7, 2) - sqrt(26.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(7, 3) - sqrt(36.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(7, 4) - sqrt(61.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(7, 5) - sqrt(10.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(7, 6) - sqrt(25.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(7, 7) - sqrt(0.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(7, 8) - sqrt(58.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(7, 9) - sqrt(80.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(7, 10) - sqrt(18.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(7, 11) - sqrt(9.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(7, 12) - sqrt(29.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(7, 13) - sqrt(8.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(7, 14) - sqrt(73.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(7, 15) - sqrt(50.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(7, 16) - sqrt(29.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(7, 17) - sqrt(37.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(7, 18) - sqrt(8.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(7, 19) - sqrt(10.0)) < std::numeric_limits<float>::epsilon());

    assert(instance.getLengths()[8].size() == 20);
    assert(fabs(instance.getLength(8, 0) - sqrt(9.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(8, 1) - sqrt(29.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(8, 2) - sqrt(20.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(8, 3) - sqrt(10.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(8, 4) - sqrt(5.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(8, 5) - sqrt(36.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(8, 6) - sqrt(53.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(8, 7) - sqrt(58.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(8, 8) - sqrt(0.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(8, 9) - sqrt(2.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(8, 10) - sqrt(16.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(8, 11) - sqrt(25.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(8, 12) - sqrt(5.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(8, 13) - sqrt(26.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(8, 14) - sqrt(37.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(8, 15) - sqrt(16.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(8, 16) - sqrt(29.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(8, 17) - sqrt(17.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(8, 18) - sqrt(50.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(8, 19) - sqrt(72.0)) < std::numeric_limits<float>::epsilon());

    assert(instance.getLengths()[9].size() == 20);
    assert(fabs(instance.getLength(9, 0) - sqrt(17.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(9, 1) - sqrt(45.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(9, 2) - sqrt(34.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(9, 3) - sqrt(20.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(9, 4) - sqrt(5.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(9, 5) - sqrt(50.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(9, 6) - sqrt(65.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(9, 7) - sqrt(80.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(9, 8) - sqrt(2.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(9, 9) - sqrt(0.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(9, 10) - sqrt(26.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(9, 11) - sqrt(41.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(9, 12) - sqrt(13.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(9, 13) - sqrt(40.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(9, 14) - sqrt(49.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(9, 15) - sqrt(26.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(9, 16) - sqrt(45.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(9, 17) - sqrt(29.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(9, 18) - sqrt(72.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(9, 19) - sqrt(98.0)) < std::numeric_limits<float>::epsilon());

    assert(instance.getLengths()[10].size() == 20);
    assert(fabs(instance.getLength(10, 0) - sqrt(1.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(10, 1) - sqrt(5.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(10, 2) - sqrt(20.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(10, 3) - sqrt(18.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(10, 4) - sqrt(13.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(10, 5) - sqrt(4.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(10, 6) - sqrt(13.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(10, 7) - sqrt(18.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(10, 8) - sqrt(16.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(10, 9) - sqrt(26.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(10, 10) - sqrt(0.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(10, 11) - sqrt(9.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(10, 12) - sqrt(5.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(10, 13) - sqrt(2.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(10, 14) - sqrt(61.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(10, 15) - sqrt(32.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(10, 16) - sqrt(29.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(10, 17) - sqrt(25.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(10, 18) - sqrt(26.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(10, 19) - sqrt(40.0)) < std::numeric_limits<float>::epsilon());

    assert(instance.getLengths()[11].size() == 20);
    assert(fabs(instance.getLength(11, 0) - sqrt(10.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(11, 1) - sqrt(2.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(11, 2) - sqrt(5.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(11, 3) - sqrt(9.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(11, 4) - sqrt(34.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(11, 5) - sqrt(13.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(11, 6) - sqrt(34.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(11, 7) - sqrt(9.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(11, 8) - sqrt(25.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(11, 9) - sqrt(41.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(11, 10) - sqrt(9.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(11, 11) - sqrt(0.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(11, 12) - sqrt(8.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(11, 13) - sqrt(5.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(11, 14) - sqrt(34.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(11, 15) - sqrt(17.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(11, 16) - sqrt(8.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(11, 17) - sqrt(10.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(11, 18) - sqrt(5.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(11, 19) - sqrt(13.0)) < std::numeric_limits<float>::epsilon());

    assert(instance.getLengths()[12].size() == 20);
    assert(fabs(instance.getLength(12, 0) - sqrt(2.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(12, 1) - sqrt(10.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(12, 2) - sqrt(9.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(12, 3) - sqrt(5.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(12, 4) - sqrt(10.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(12, 5) - sqrt(17.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(12, 6) - sqrt(34.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(12, 7) - sqrt(29.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(12, 8) - sqrt(5.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(12, 9) - sqrt(13.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(12, 10) - sqrt(5.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(12, 11) - sqrt(8.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(12, 12) - sqrt(0.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(12, 13) - sqrt(9.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(12, 14) - sqrt(34.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(12, 15) - sqrt(13.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(12, 16) - sqrt(16.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(12, 17) - sqrt(10.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(12, 18) - sqrt(25.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(12, 19) - sqrt(41.0)) < std::numeric_limits<float>::epsilon());

    assert(instance.getLengths()[13].size() == 20);
    assert(fabs(instance.getLength(13, 0) - sqrt(5.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(13, 1) - sqrt(1.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(13, 2) - sqrt(18.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(13, 3) - sqrt(20.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(13, 4) - sqrt(25.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(13, 5) - sqrt(2.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(13, 6) - sqrt(13.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(13, 7) - sqrt(8.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(13, 8) - sqrt(26.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(13, 9) - sqrt(40.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(13, 10) - sqrt(2.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(13, 11) - sqrt(5.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(13, 12) - sqrt(9.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(13, 13) - sqrt(0.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(13, 14) - sqrt(61.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(13, 15) - sqrt(34.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(13, 16) - sqrt(25.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(13, 17) - sqrt(25.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(13, 18) - sqrt(16.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(13, 19) - sqrt(26.0)) < std::numeric_limits<float>::epsilon());

    assert(instance.getLengths()[14].size() == 20);
    assert(fabs(instance.getLength(14, 0) - sqrt(52.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(14, 1) - sqrt(52.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(14, 2) - sqrt(13.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(14, 3) - sqrt(13.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(14, 4) - sqrt(68.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(14, 5) - sqrt(85.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(14, 6) - sqrt(128.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(14, 7) - sqrt(73.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(14, 8) - sqrt(37.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(14, 9) - sqrt(49.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(14, 10) - sqrt(61.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(14, 11) - sqrt(34.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(14, 12) - sqrt(34.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(14, 13) - sqrt(61.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(14, 14) - sqrt(0.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(14, 15) - sqrt(5.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(14, 16) - sqrt(10.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(14, 17) - sqrt(8.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(14, 18) - sqrt(37.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(14, 19) - sqrt(49.0)) < std::numeric_limits<float>::epsilon());

    assert(instance.getLengths()[15].size() == 20);
    assert(fabs(instance.getLength(15, 0) - sqrt(25.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(15, 1) - sqrt(29.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(15, 2) - sqrt(4.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(15, 3) - sqrt(2.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(15, 4) - sqrt(37.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(15, 5) - sqrt(52.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(15, 6) - sqrt(85.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(15, 7) - sqrt(50.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(15, 8) - sqrt(16.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(15, 9) - sqrt(26.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(15, 10) - sqrt(32.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(15, 11) - sqrt(17.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(15, 12) - sqrt(13.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(15, 13) - sqrt(34.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(15, 14) - sqrt(5.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(15, 15) - sqrt(0.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(15, 16) - sqrt(5.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(15, 17) - sqrt(1.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(15, 18) - sqrt(26.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(15, 19) - sqrt(40.0)) < std::numeric_limits<float>::epsilon());

    assert(instance.getLengths()[16].size() == 20);
    assert(fabs(instance.getLength(16, 0) - sqrt(26.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(16, 1) - sqrt(18.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(16, 2) - sqrt(1.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(16, 3) - sqrt(5.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(16, 4) - sqrt(50.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(16, 5) - sqrt(41.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(16, 6) - sqrt(74.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(16, 7) - sqrt(29.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(16, 8) - sqrt(29.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(16, 9) - sqrt(45.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(16, 10) - sqrt(29.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(16, 11) - sqrt(8.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(16, 12) - sqrt(16.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(16, 13) - sqrt(25.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(16, 14) - sqrt(10.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(16, 15) - sqrt(5.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(16, 16) - sqrt(0.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(16, 17) - sqrt(2.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(16, 18) - sqrt(9.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(16, 19) - sqrt(17.0)) < std::numeric_limits<float>::epsilon());

    assert(instance.getLengths()[17].size() == 20);
    assert(fabs(instance.getLength(17, 0) - sqrt(20.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(17, 1) - sqrt(20.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(17, 2) - sqrt(1.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(17, 3) - sqrt(1.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(17, 4) - sqrt(36.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(17, 5) - sqrt(41.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(17, 6) - sqrt(72.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(17, 7) - sqrt(37.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(17, 8) - sqrt(17.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(17, 9) - sqrt(29.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(17, 10) - sqrt(25.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(17, 11) - sqrt(10.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(17, 12) - sqrt(10.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(17, 13) - sqrt(25.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(17, 14) - sqrt(8.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(17, 15) - sqrt(1.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(17, 16) - sqrt(2.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(17, 17) - sqrt(0.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(17, 18) - sqrt(17.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(17, 19) - sqrt(29.0)) < std::numeric_limits<float>::epsilon());

    assert(instance.getLengths()[18].size() == 20);
    assert(fabs(instance.getLength(18, 0) - sqrt(29.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(18, 1) - sqrt(9.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(18, 2) - sqrt(10.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(18, 3) - sqrt(20.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(18, 4) - sqrt(65.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(18, 5) - sqrt(26.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(18, 6) - sqrt(53.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(18, 7) - sqrt(8.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(18, 8) - sqrt(50.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(18, 9) - sqrt(72.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(18, 10) - sqrt(26.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(18, 11) - sqrt(5.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(18, 12) - sqrt(25.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(18, 13) - sqrt(16.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(18, 14) - sqrt(37.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(18, 15) - sqrt(26.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(18, 16) - sqrt(9.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(18, 17) - sqrt(17.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(18, 18) - sqrt(0.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(18, 19) - sqrt(2.0)) < std::numeric_limits<float>::epsilon());

    assert(instance.getLengths()[19].size() == 20);
    assert(fabs(instance.getLength(19, 0) - sqrt(45.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(19, 1) - sqrt(17.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(19, 2) - sqrt(20.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(19, 3) - sqrt(34.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(19, 4) - sqrt(89.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(19, 5) - sqrt(36.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(19, 6) - sqrt(65.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(19, 7) - sqrt(10.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(19, 8) - sqrt(72.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(19, 9) - sqrt(98.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(19, 10) - sqrt(40.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(19, 11) - sqrt(13.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(19, 12) - sqrt(41.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(19, 13) - sqrt(26.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(19, 14) - sqrt(49.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(19, 15) - sqrt(40.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(19, 16) - sqrt(17.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(19, 17) - sqrt(29.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(19, 18) - sqrt(2.0)) < std::numeric_limits<float>::epsilon());
    assert(fabs(instance.getLength(19, 19) - sqrt(0.0)) < std::numeric_limits<float>::epsilon());

    return 0;
}

